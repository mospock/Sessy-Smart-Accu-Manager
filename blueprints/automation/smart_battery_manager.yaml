blueprint:
  name: Slimme Accu Laad- en Ontlaad Manager (Prijs & Load Balancing)
  description: |
    Beheert het laden van accu's tijdens de goedkoopste uren en het ontladen
    tijdens dure uren ('Nul op de meter' methode).
  # Zorg ervoor dat de source_url de directe link naar dit bestand op uw GitHub Gist/Repo bevat!
  source_url: https://github.com/mospock/Sessy-Smart-Accu-Manager/blob/main/blueprints/automation/smart_battery_manager.yaml
  domain: automation
  input:
    # ----------------------------------------------------------------------
    # 1. CORE SENSOREN (VERPLICHT) - DEFINITIEVE CORRECTIE HIERONDER
    # ----------------------------------------------------------------------
    p1_sensor_vermogen_a:
      name: Huidig Verbruik (Ampère)
      description: Sensor die het totale actuele stroomverbruik van het huis in Ampère (A) meet.
      selector:
        entity:
          # De filters (domain & UoM) staan nu correct onder 'filter'
          filter:
            - domain: sensor
              unit_of_measurement: A
          
    lading_accu_1:
      name: Laadstatus Accu 1 (SoC %)
      description: Sensor voor de laadstatus van accu 1 in percentage (0-100).
      selector:
        entity:
          filter:
            - domain: sensor
              unit_of_measurement: "%"

    lading_accu_2:
      name: Laadstatus Accu 2 (SoC %)
      description: Sensor voor de laadstatus van accu 2 in percentage (0-100).
      selector:
        entity:
          filter:
            - domain: sensor
              unit_of_measurement: "%"

    prijs_tarief_sensor:
      name: Dynamische Stroomprijs Sensor
      description: Zonneplan/Tibber sensor (met 'forecast' attribuut) voor de dynamische prijs (EUR/kWh).
      selector:
        entity:
          filter:
            - domain: sensor
              unit_of_measurement: EUR/kWh

    netto_verbruik_w:
      name: Netto Verbruik Huis (Watt)
      description: Sensor die het actuele Netto Stroomverbruik (W) meet. Positief=Import, Negatief=Export/Nul op de meter.
      selector:
        entity:
          filter:
            - domain: sensor
              unit_of_measurement: W
          
    # ----------------------------------------------------------------------
    # 2. OUTPUT HELPERS (MOETEN INPUT_NUMBER ZIJN) - Geen filter nodig voor input_number
    # ----------------------------------------------------------------------
    input_vermogen_accu_1:
      name: Accu 1 Laad/Ontlaad Helper
      description: Input Number helper voor het laad/ontlaadvermogen van accu 1 (Watt).
      selector:
        entity:
          domain: input_number

    input_vermogen_accu_2:
      name: Accu 2 Laad/Ontlaad Helper
      description: Input Number helper voor het laad/ontlaadvermogen van accu 2 (Watt).
      selector:
        entity:
          domain: input_number
          
    # ----------------------------------------------------------------------
    # 3. CONFIGUREERBARE WAARDEN (GEEN WIJZIGING NODIG)
    # ----------------------------------------------------------------------
    max_stroom_net_a:
      name: Max. Hoofdaansluiting (A)
      default: 25.0
      selector:
        number:
          min: 1
          max: 40
          unit_of_measurement: A
          mode: box
          
    max_stroom_per_accu_a:
      name: Max. Stroom per Accu (A)
      default: 6.52 # ~1500W bij 230V
      selector:
        number:
          min: 1
          max: 10
          unit_of_measurement: A
          mode: box

    totale_capaciteit_wh:
      name: Totale Accu Capaciteit (Wh)
      description: Gezamenlijke bruikbare capaciteit van de accu's in Wattuur.
      default: 10000
      selector:
        number:
          min: 1000
          max: 100000
          unit_of_measurement: Wh
          mode: box

    max_ontlaad_w:
      name: Max. Ontlaadvermogen Totaal (W)
      default: 5000
      selector:
        number:
          min: 1000
          max: 10000
          unit_of_measurement: W
          mode: box

    ontlaad_prijs_grens_eur:
      name: Ontlaad Prijsgrens (€/kWh)
      description: Ontladen start wanneer de stroomprijs hoger is dan deze grens (bijv. 0.10 voor 10c).
      default: 0.10
      selector:
        number:
          min: 0
          max: 1.0
          step: 0.001
          unit_of_measurement: €/kWh
          mode: box

    min_soc_ontladen:
      name: Minimale SoC voor Ontladen (%)
      description: De accu stopt met ontladen als deze onder dit percentage komt.
      default: 20
      selector:
        number:
          min: 5
          max: 95
          unit_of_measurement: "%"
          mode: box

    doel_soc_percentage:
      name: Doel SoC Lading (%)
      description: Het percentage dat de accu's moeten bereiken (meestal 100).
      default: 100
      selector:
        number:
          min: 80
          max: 100
          unit_of_measurement: "%"
          mode: box
          
mode: single
max_exceeded: silent

trigger:
  - platform: time_pattern
    seconds: "/10"
    
action:
  # ----------------------------------------------------------------------------
  # 1. BEREKENING VAN DE HUIDIGE STATUS & BENODIGDE UREN
  # ----------------------------------------------------------------------------
  - variables:
      # Configuratieparameters uit de Blueprint inputs
      MAX_STROOM_NET_A: !input max_stroom_net_a
      MAX_STROOM_PER_ACCU_A: !input max_stroom_per_accu_a
      MAX_ONTLAAD_W: !input max_ontlaad_w
      ONTLAAD_PRIJS_GRENS: !input ontlaad_prijs_grens_eur
      MIN_SOC_ONT: !input min_soc_ontladen
      DOEL_SOC: !input doel_soc_percentage
      TOTALE_CAP_WH: !input totale_capaciteit_wh
      VEILIGHEIDSMARGE: 0.5 # Stroom buffer (A)
      SPANNING: 230.0 # V

      # Actuele waarden
      HUIDIG_VERBRUIK_A: "{{ states(p1_sensor_vermogen_a) | float(0) }}"
      LADING_A1: "{{ states(lading_accu_1) | float(0) }}"
      LADING_A2: "{{ states(lading_accu_2) | float(0) }}"
      NETTO_VERBRUIK_W: "{{ states(netto_verbruik_w) | float(0) }}"
      HUIDIGE_PRIJS_EUR: "{{ states(prijs_tarief_sensor) | float(99) }}"
      GEM_LADING: "{{ ((LADING_A1 + LADING_A2) / 2) | round(1) }}"
      
      # 1a. Bereken Benodigde Laadtijd (Uren)
      WH_NODIG: "{{ ((DOEL_SOC - GEM_LADING) / 100 * TOTALE_CAP_WH) | max(0) }}"
      UREN_NODIG: "{{ (WH_NODIG / MAX_ONTLAAD_W) | round(2) }}"
      UREN_NODIG_BLOK: "{{ (UREN_NODIG * 2) | round(0, 'ceil') / 2 }}" # Afgerond naar half uur

      # 1b. Bepaal de Goedkoopste Laadperiode
      PRICES: "{{ state_attr(prijs_tarief_sensor, 'forecast') | default([]) }}"
      PRICES_FUTURE: "{{ PRICES | selectattr('datetime', '>', now().isoformat()) | list }}"
      
      BEST_WINDOW_INFO: >
        {% set benodigde_uren = UREN_NODIG_BLOK | int %}
        {% set ns = namespace(cheapest_price=99999, start_time=none) %}
        {% if benodigde_uren > 0 %}
          {% for i in range(0, PRICES_FUTURE | length - benodigde_uren) %}
            {% set window = PRICES_FUTURE[i:i + benodigde_uren] %}
            {% set avg_price = window | map(attribute='electricity_price') | map('float', 0) | average %}
            {% if avg_price < ns.cheapest_price %}
              {% set ns.cheapest_price = avg_price %}
              {% set ns.start_time = window[0].datetime %}
            {% endif %}
          {% endfor %}
        {% endif %}
        {{ ns }}

      IS_GOEDKOOPSTE_TIJD: >
        {% set info = BEST_WINDOW_INFO %}
        {% if info.start_time is not none %}
          {% set start = as_datetime(info.start_time) %}
          {% set end = start + timedelta(hours=UREN_NODIG_BLOK) %}
          {{ now() >= start and now() < end }}
        {% else %}
          False
        {% endif %}
        
  # ----------------------------------------------------------------------------
  # 2. BEPALING VAN DE ACTIE (ONT-/LADEN OF STANDBY)
  # ----------------------------------------------------------------------------
  - choose:
      # ======================================================================
      # KEUZE 1: SLIM ONTLADEN (Tijdens dure uren, Nul op de meter)
      # ======================================================================
    - conditions:
        # 1a. Prijs is hoger dan de drempel
        - condition: template
          value_template: "{{ HUIDIGE_PRIJS_EUR > ONTLAAD_PRIJS_GRENS }}"
        # 1b. Huis verbruikt stroom van het net
        - condition: template
          value_template: "{{ NETTO_VERBRUIK_W > 50 }}" # 50W marge voor stabiliteit
        # 1c. Accu's zijn niet onder de minimale ontlaadgrens
        - condition: template
          value_template: "{{ GEM_LADING > MIN_SOC_ONT }}"

      sequence:
        - variables:
            # Ontladen om NETTO_VERBRUIK_W te compenseren, gelimiteerd tot MAX_ONTLAAD_W
            GEWENST_ONTLAAD_W: "{{ [NETTO_VERBRUIK_W, MAX_ONTLAAD_W] | min }}"
            # Negatieve waarde instellen op de input_number = ontladen
            ONTLAAD_A1: "{{ (- GEWENST_ONTLAAD_W / 2) | round(0) }}"
            ONTLAAD_A2: "{{ (- GEWENST_ONTLAAD_W / 2) | round(0) }}"
            
        - service: input_number.set_value
          target:
            entity_id: !input input_vermogen_accu_1
          data:
            value: "{{ ONTLAAD_A1 }}"
            
        - service: input_number.set_value
          target:
            entity_id: !input input_vermogen_accu_2
          data:
            value: "{{ ONTLAAD_A2 }}"

      # ======================================================================
      # KEUZE 2: SLIM LADEN (Tijdens goedkoopste uren, Load Balancing actief)
      # ======================================================================
    - conditions:
        # 2a. Is de berekende goedkope laadtijd nu actief?
        - condition: template
          value_template: "{{ IS_GOEDKOOPSTE_TIJD }}"
        # 2b. Accu's zijn niet vol
        - condition: template
          value_template: "{{ GEM_LADING < DOEL_SOC }}"
        
      sequence:
        - variables:
            IS_A1_FULL: "{{ LADING_A1 >= DOEL_SOC }}"
            IS_A2_FULL: "{{ LADING_A2 >= DOEL_SOC }}"
            
            # Beschikbare stroom voor laden (netlimiet - huisverbruik - marge)
            BESCHIKBARE_STROOM_TOTAAL: "{{ [0, MAX_STROOM_NET_A - HUIDIG_VERBRUIK_A - VEILIGHEIDSMARGE] | max }}"
            
            # Aantal accu's dat geladen moet worden
            TE_LADEN_COUNT: >
              {% set count = 0 %}
              {% if not IS_A1_FULL %} {% set count = count + 1 %} {% endif %}
              {% if not IS_A2_FULL %} {% set count = count + 1 %} {% endif %}
              {{ count }}
              
            # Stroom gelijkmatig verdelen over actieve laders
            STROOM_PER_LADER: >
              {% if TE_LADEN_COUNT == 0 %}
                0.0
              {% else %}
                {{ BESCHIKBARE_STROOM_TOTAAL / TE_LADEN_COUNT }}
              {% endif %}

            # Toewijzing van de laadstroom (A), gelimiteerd tot max_stroom_per_accu_a
            STROOM_A1_FINAL: >
              {% if IS_A1_FULL %}
                0.0
              {% else %}
                {{ [MAX_STROOM_PER_ACCU_A, STROOM_PER_LADER] | min | round(2) }}
              {% endif %}
              
            STROOM_A2_FINAL: >
              {% if IS_A2_FULL %}
                0.0
              {% else %}
                {{ [MAX_STROOM_PER_ACCU_A, STROOM_PER_LADER] | min | round(2) }}
              {% endif %}

            # Omzetten naar Watt (positieve waarde = laden)
            VERMOGEN_A1_FINAL: "{{ (STROOM_A1_FINAL | float(0) * SPANNING) | round(0) }}"
            VERMOGEN_A2_FINAL: "{{ (STROOM_A2_FINAL | float(0) * SPANNING) | round(0) }}"
            
        - service: input_number.set_value
          target:
            entity_id: !input input_vermogen_accu_1
          data:
            value: "{{ VERMOGEN_A1_FINAL }}"

        - service: input_number.set_value
          target:
            entity_id: !input input_vermogen_accu_2
          data:
            value: "{{ VERMOGEN_A2_FINAL }}"

    # ======================================================================
    # DEFAULT ACTIE: STANDBY (Niet ontladen of laden)
    # ======================================================================
    default:
      - service: input_number.set_value
        target:
          entity_id: !input input_vermogen_accu_1
        data:
          value: 0
      - service: input_number.set_value
        target:
          entity_id: !input input_vermogen_accu_2
        data:
          value: 0